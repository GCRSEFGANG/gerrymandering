/*=======================================
 geos.cpp:                      k-vernooy
 last modified:               Tue, Feb 18
 
 For conversion of types into the GEOS
 (Geometry Engine, Open Source) library.
 Since the python library Polygonly is built
 on top of this, it may become useful for
 faster unions, and other clipping.
========================================*/

#include <geos.h>
#include <geos/operation.h>
#include <geos/operation/union/UnaryUnionOp.h>

using namespace geos;
using namespace geos::geom;
using namespace geos::operation;

#include "../../include/geometry.hpp"
#include "../../include/shape.hpp"   // class definitions

Multi_Polygon generate_exterior_border(Precinct_Group precinct_group) {
    /*
        Get the exterior border of a shape with interior components.
        Equivalent to 'dissolve' in mapshaper - remove bordering edges
    */ 
    const GeometryFactory* newFactory;
    vector<Geometry*>* geoms;

    for (Precinct p : precinct_group.precincts) {
        geoms->push_back(shape_to_poly(p));
        x++;
    }

    MultiPolygon* polys = newFactory->createMultiPolygon(geoms);
    unique_ptr<Geometry> u = polys->getBoundary();//geounion::UnaryUnionOp::Union(polys);

    Multi_Polygon border;
    for (int i = 0; i < u->getNumGeometries(); i++) {
        const Geometry* geo = u->getGeometryN(i);
        border.border.push_back(poly_to_shape(geo));
    }

    return border;
    // return poly_to_shape(u);
    // return clipper_mult_int_to_shape(solutions);
}

LinearRing* create_linearring(coordinate_set coords) {
    // We will use a coordinate list to build the linearring
    CoordinateArraySequence* cl = new CoordinateArraySequence();

    for (coordinate c : coords) {
        cl->add(Coordinate(c[0], c[1]));
    }

    LinearRing* lr = global_factory->createLinearRing(cl);
    return lr; // our LinearRing
}

Point* create_point(double x, double y) {
    /* given coordinates creates a point object */
    Coordinate c(x, y);
    Point* p = global_factory->createPoint(c);
    return p;
}

Geometry* shape_to_poly(Polygon shape) {
    /*
        Creates a GEOS library polygon object from a
        given Polygon object by looping through points
    */
   cout << "b" << endl;

    // blank holes vector
    vector<LinearRing*>* holes = new vector<LinearRing*>;
       cout << "b" << endl;

    // outer ring generated by looping through coordinates
    LinearRing* outer = create_linearring(shape.border);
       cout << "b" << endl;

    Polygon* poly = global_factory->createPolygon(outer, holes);
   cout << "b" << endl;

    return poly;
}

Polygon poly_to_shape(const Geometry* path) {
    /*
        Creates a shape object from a clipper Path
        object by looping through points
    */

    Polygon s;
    
    // write coordinates in path to vector of Coordinates
    std::unique_ptr <CoordinateSequence> points = path->getCoordinates();
    vector<Coordinate> coords;
    points->toVector(coords);
    
    for (Coordinate coord : coords) {
        coordinate nc = {(float) coord.x, (float) coord.y};
        s.border.push_back(nc);
    }

    return s;
}

Multi_Polygon* multipoly_to_shape(MultiPolygon* paths) {
    /*
        Create a Multi_Polygon object from a clipper Paths
        (multi path) object through nested iteration
    */

    Multi_Polygon* ms;
    
    return ms;
}