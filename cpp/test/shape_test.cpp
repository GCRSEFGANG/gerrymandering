/*=======================================
 shape_test.cpp:                k-vernooy
 last modified:                Sun, Feb 9
 
 A driver program for testing methods in
 the shape classes (state, precinct, etc)
========================================*/

#include "../include/shape.hpp"
#include "../include/term_disp.hpp"

using namespace std;

void assert_equal(string context, float n1, float n2) {
    if ( n1 != n2 )
        cout << RED << "error " << RESET << "in " << context << ", " << n1 << " != " << n2;
    else
        cout << GREEN << "passed " << RESET << context << ", " << n1 << " = " << n2;
    cout << endl;
}

int main(int argc, char* argv[]) {
    vector<vector<float> > border = {{-73.177072, 44.173907}, {-73.17617, 44.169829}, {-73.17600399999999, 44.169078}, {-73.17509799999999, 44.164364}, {-73.17465399999999, 44.162493}, {-73.17397, 44.158637}, {-73.17380299999999, 44.158027}, {-73.173399, 44.155947999999995}, {-73.172995, 44.153836999999996}, {-73.175685, 44.154323999999995}, {-73.18616399999999, 44.15553}, {-73.186768, 44.155632}, {-73.19065499999999, 44.156279999999995}, {-73.19415099999999, 44.156824}, {-73.194947, 44.156912}, {-73.196862, 44.15718}, {-73.197182, 44.157337}, {-73.197317, 44.157347}, {-73.19818099999999, 44.157469}, {-73.200557, 44.157848}, {-73.20141799999999, 44.158001}, {-73.20191299999999, 44.158083}, {-73.202001, 44.158097999999995}, {-73.202033, 44.158103}, {-73.20214399999999, 44.158122}, {-73.202276, 44.158144}, {-73.202495, 44.15818}, {-73.203791, 44.158383}, {-73.204656, 44.158514}, {-73.205517, 44.158653}, {-73.205714, 44.158682}, {-73.206161, 44.158747999999996}, {-73.207606, 44.158983}, {-73.208744, 44.159168}, {-73.209971, 44.159354}, {-73.269}, {-73.110193, 44.278096}, {-73.110044, 44.278116999999995}, {-73.109888, 44.27814}, {-73.109726, 44.278163}, {-73.109631, 44.278175999999995}, {-73.107652, 44.278442}, {-73.107554, 44.278455}, {-73.10674999999999, 44.278563999999996}, {-73.106113, 44.278648}, {-73.106027, 44.278659}, {-73.10472899999999, 44.278832}, {-73.103447, 44.279013}, {-73.102665, 44.279123}, {-73.101953, 44.279222999999995}, {-73.10193699999999, 44.279225}, {-73.101927, 44.279226}, {-73.101905, 44.279229}, {-73.101862, 44.279235}, {-73.10185, 44.279236999999995}, {-73.101293, 44.279315}, {-73.101246, 44.279322}, {-73.09659599999999, 44.279984}, {-73.09646599999999, 44.280001}, {-73.096347, 44.280017}, {-73.094544, 44.28026}, {-73.090492, 44.280836}, {-73.089823, 44.280930999999995}, {-73.089709, 44.280947999999995}, {-73.089607, 44.280964}, {-73.089561, 44.280969}, {-73.089544, 44.280971}, {-73.08719099999999, 44.281306}, {-73.086502, 44.281403999999995}, {-73.08441599999999, 44.281703}, {-73.084389, 44.281706}, {-73.083497, 44.281842}, {-73.08236699999999, 44.282015}, {-73.080607, 44.282278}, {-73.08063899999999, 44.280604}, {-73.08033, 44.278464}, {-73.08017099999999, 44.276677}, {-73.080162, 44.276593999999996}, {-73.080154, 44.276526}, {-73.080108, 44.276106}, {-73.078182, 44.265386}, {-73.077691, 44.261485}, {-73.07764, 44.261066}, {-73.07731, 44.258424}, {-73.07704199999999, 44.257376}, {-73.07654099999999, 44.255541}, {-73.07566299999999, 44.25225}, {-73.075482, 44.251568999999996}, {-73.07542099999999, 44.251343}, {-73.08044699999999, 44.250653}, {-73.082469, 44.250324}, {-73.084389, 44.250313999999996}, {-73.083766, 44.247482999999995}, {-73.08226599999999, 44.239796999999996}, {-73.081132, 44.234102}, {-73.078369, 44.220276999999996}, {-73.075779, 44.207752}, {-73.07320899999999, 44.194970999999995}, {-73.07101899999999, 44.184405}, {-73.071223, 44.184394}, {-73.08373399999999, 44.183665}, {-73.083962, 44.183631}, {-73.095989, 44.181805}, {-73.09870000000001, 44.181399}, {-73.098826, 44.181380999999995}, {-73.098922, 44.181374999999996}, {-73.098997, 44.181369}, {-73.10407, 44.181055}, {-73.119035, 44.179697}, {-73.142916, 44.177389}, {-73.14757399999999, 44.176884}, {-73.148704, 44.176776}, {-73.14950499999999, 44.176694}, {-73.151279, 44.176379999999995}, {-73.165307, 44.175101999999995}, {-73.16636799999999, 44.175166}, {-73.166438, 44.175140999999996}, {-73.172597, 44.174523}, {-73.17577299999999, 44.174271}, {-73.177072, 44.173907}};
    Shape shape(border);
    shape.draw();

    // assert_equal("checking area function", area(shape), 0.5);
    // assert_equal("testing center coord 1", center(shape)[0], 0.333333);
    // assert_equal("testing center coord 2", center(shape)[1], 0.333333);
}